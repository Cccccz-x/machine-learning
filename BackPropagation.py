import numpy as np
import matplotlib.pyplot as plt

x_train = np.array([
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 0, 1, 1, 0, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 1, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 1, 0, 0,
 0, 0, 0, 0, 1, 0, 0,
 0, 0, 0, 0, 1, 0, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 1, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 0, 1, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 0, 0]
])
y_train = np.array([
    [1,0,0,0,0,0,0,0,0,0],
    [0,1,0,0,0,0,0,0,0,0],
    [0,0,1,0,0,0,0,0,0,0],
    [0,0,0,1,0,0,0,0,0,0],
    [0,0,0,0,1,0,0,0,0,0],
    [0,0,0,0,0,1,0,0,0,0],
    [0,0,0,0,0,0,1,0,0,0],
    [0,0,0,0,0,0,0,1,0,0],
    [0,0,0,0,0,0,0,0,1,0],
    [0,0,0,0,0,0,0,0,0,1]])
x_test = np.array([
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 0, 1, 1, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 1, 0, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 0, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 0, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 1, 0, 0,
 0, 0, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 1, 0, 0,
 0, 0, 0, 0, 1, 0, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 0, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 0, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 0, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 1, 0, 0,
 0, 0, 0, 1, 0, 0, 0,
 0, 0, 1, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 0, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0,
 0, 1, 1, 1, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 1, 0, 0, 0, 1, 0,
 0, 0, 1, 1, 1, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 0, 0]
])
y_test = np.array(y_train)

data_size=10
learning_rate=0.001
epochs=10000
#define the number of neuron
#there is 1 input layer, 1 output layer, 1 hidden layer
input_size=63
output_size=10
hide1_size=100

#initialize data
#x=input  y=output  b=hidden
#wi = i layer connection weight
# x2=np.random.rand(hide1_size,1)

#+1 means include the threshold
w1=0.01*np.random.rand(input_size+1,hide1_size)
w2=0.01*np.random.rand(hide1_size+1,output_size)

extra=np.ones((1,1))

def sigmoid(x):
    return 1/(1+np.exp(-x))

def cost(w1,w2,x1,y):
    x2=sigmoid(w1.T.dot(np.r_[x1,extra]))
    y_pre=sigmoid(w2.T.dot(np.r_[x2,extra]))
    return (1/2)*np.sum(np.square(y_pre-y))

def argmin(w1,w2):
    history_cost=np.zeros(epochs)
    for k in range(epochs):
        cos=np.zeros(data_size)
        for i in range(data_size):

            x1=np.array(x_train[i]).reshape(input_size,1)
            y=np.array(y_train[i]).reshape(output_size,1)

            x1e=np.r_[x1,extra]
            x2=sigmoid(w1.T.dot(x1e))
            x2e=np.r_[x2,extra]
            y_pre=sigmoid(w2.T.dot(x2e))
            dy=(y_pre-y).T
            diff_y_pre=y_pre.T.dot(1-y_pre)

            t=np.delete(w2,hide1_size,axis=0).T #此变量定义只为了截图方便
            w2-=learning_rate*2*(x2e.dot(diff_y_pre)).dot(dy)
            w1-=learning_rate*2*(diff_y_pre*(x2.T.dot(1-x2))*((x1e.dot(dy)).dot(t)))
            cos[i]=cost(w1,w2,x1,y)
        history_cost[k]=np.sum(cos)
        if k>5000:
            if history_cost[k-1]-history_cost[k]<1e-5:
                break
    return w1,w2,history_cost

w1,w2,history_cost = argmin(w1,w2)

# test
false=0
for i in range(data_size):

    x1 = np.array(x_test[i]).reshape(input_size, 1)
    y = np.array(y_test[i]).reshape(output_size, 1)

    x1e = np.r_[x1, extra]
    x2 = sigmoid(w1.T.dot(x1e))
    x2e = np.r_[x2, extra]
    y_pre = sigmoid(w2.T.dot(x2e))
    print(y_pre.T,'\n',y.T,'\n',(1/2)*np.sum(np.square(y_pre-y)))
    for j in range(output_size):
        if abs(y_pre[j]-y[j])>0.5:
            false+=1
            break
print(false)


fig, ax = plt.subplots(figsize=(10, 7))
ax.set_ylabel('cost')
ax.set_xlabel('epochs')
_ = ax.plot(range(epochs), history_cost, 'r')
plt.show()